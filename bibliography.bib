@book{distributed-systems,
author = {Tanenbaum, Andrew S. and Steen, Maarten van},
title = {Distributed Systems},
year = {2023},
isbn = {9081540637},
publisher = {Prentice-Hall, Inc.},
address = {USA}
}
@article{singh2020,
author = {Singh, Mahendra and Kumar, Chiranjeev and Nath, Prem},
title = {Finger Forwarding Scheme to Reduce Lookup Cost in Structured P2P Networks},
year = {2020},
issue_date = {Oct 2020},
publisher = {Kluwer Academic Publishers},
address = {USA},
volume = {114},
number = {3},
issn = {0929-6212},
url = {https://doi.org/10.1007/s11277-020-07475-z},
doi = {10.1007/s11277-020-07475-z},
abstract = {Peer-to-peer (P2P) networks are distributed systems where each user shares his resources and cooperates with other users. These networks are designed over IP-based infrastructure. The resources of each user in these networks are shared in a distributed way on a trust based mechanism. P2P networks have some unique characteristics like scalability and cost efficiency, which separate these networks from other distributed networks. These networks are mainly used for resource sharing. However, resource searching in this type of networks is not centrally controlled in nature. Further poor search scalability is another limitation of these networks. Chord like or chord-based protocols used in the search operations in P2P networks utilize a finger table to shorten the query search length. We exploit the finger forwarding mechanism in our proposed scheme which further reduces the resource’s search path length. We propose a last finger search table in addition to finger table to enhance the file lookup performance in the structured P2P networks. The proposed scheme reduces the lookup path and increases search efficiency as compared to the existing chord and binary search routing equivalent schemes.},
journal = {Wirel. Pers. Commun.},
month = {oct},
pages = {2263-–2281},
numpages = {19},
keywords = {Lookup path, Predecessor, Successor, Chord, Finger forwarding}
}
@article{stoica2001,
author = {Stoica, Ion and Morris, Robert and Karger, David and Kaashoek, M. Frans and Balakrishnan, Hari},
title = {Chord: A scalable peer-to-peer lookup service for internet applications},
year = {2001},
issue_date = {October 2001},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {31},
number = {4},
issn = {0146-4833},
url = {https://doi.org/10.1145/964723.383071},
doi = {10.1145/964723.383071},
abstract = {A fundamental problem that confronts peer-to-peer applications is to efficiently locate the node that stores a particular data item. This paper presents Chord, a distributed lookup protocol that addresses this problem. Chord provides support for just one operation: given a key, it maps the key onto a node. Data location can be easily implemented on top of Chord by associating a key with each data item, and storing the key/data item pair at the node to which the key maps. Chord adapts efficiently as nodes join and leave the system, and can answer queries even if the system is continuously changing. Results from theoretical analysis, simulations, and experiments show that Chord is scalable, with communication cost and the state maintained by each node scaling logarithmically with the number of Chord nodes.},
journal = {SIGCOMM Comput. Commun. Rev.},
month = {aug},
pages = {149–-160},
numpages = {12}
}
@article{zarrin2017,
author = {Zarrin, Javad and Aguiar, Rui and Barraca, João},
year = {2017},
month = {11},
pages = {},
title = {Resource discovery for distributed computing systems: A comprehensive survey},
volume = {113},
journal = {Journal of Parallel and Distributed Computing},
doi = {10.1016/j.jpdc.2017.11.010}
}
@inproceedings{cohen2003incentives,
  title={Incentives build robustness in BitTorrent},
  author={Cohen, Bram},
  booktitle={Workshop on Economics of Peer-to-Peer systems},
  volume={6},
  pages={68--72},
  year={2003},
  organization={Berkeley, CA, USA}
}
@InProceedings{Douceur2002,
author={Douceur, John R.},
editor={Druschel, Peter and Kaashoek, Frans and Rowstron, Antony},
title={The Sybil Attack},
booktitle={Peer-to-Peer Systems},
year={2002},
publisher={Springer Berlin Heidelberg},
address={Berlin, Heidelberg},
pages={251--260},
abstract={Large-scale peer-to-peer systems face security threats from faulty or hostile remote computing elements. To resist these threats, many such systems employ redundancy. However, if a single faulty entity can present multiple identities, it can control a substantial fraction of the system, thereby undermining this redundancy. One approach to preventing these ``Sybil attacks'' is to have a trusted agency certify identities. This paper shows that, without a logically centralized authority, Sybil attacks are always possible except under extreme and unrealistic assumptions of resource parity and coordination among entities.},
isbn={978-3-540-45748-0}
}
@InProceedings{BitTorrent2005,
author={Pouwelse, Johan and Garbacki, Pawe{\l} and Epema, Dick and Sips, Henk},
editor={Castro, Miguel and van Renesse, Robbert},
title={The Bittorrent P2P File-Sharing System: Measurements and Analysis},
booktitle={Peer-to-Peer Systems IV},
year={2005},
publisher={Springer Berlin Heidelberg},
address={Berlin, Heidelberg},
pages={205--216},
abstract={Of the many P2P file-sharing prototypes in existence, BitTorrent is one of the few that has managed to attract millions of users. BitTorrent relies on other (global) components for file search, employs a moderator system to ensure the integrity of file data, and uses a bartering technique for downloading in order to prevent users from freeriding. In this paper we present a measurement study of BitTorrent in which we focus on four issues, viz. availability, integrity, flashcrowd handling, and download performance. The purpose of this paper is to aid in the understanding of a real P2P system that apparently has the right mechanisms to attract a large user community, to provide measurement data that may be useful in modeling P2P systems, and to identify design issues in such systems.},
isbn={978-3-540-31906-1}
}
@article{DeCandia2007,
author = {DeCandia, Giuseppe and Hastorun, Deniz and Jampani, Madan and Kakulapati, Gunavardhan and Lakshman, Avinash and Pilchin, Alex and Sivasubramanian, Swaminathan and Vosshall, Peter and Vogels, Werner},
title = {Dynamo: amazon's highly available key-value store},
year = {2007},
issue_date = {December 2007},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {41},
number = {6},
issn = {0163-5980},
url = {https://doi.org/10.1145/1323293.1294281},
doi = {10.1145/1323293.1294281},
abstract = {Reliability at massive scale is one of the biggest challenges we face at Amazon.com, one of the largest e-commerce operations in the world; even the slightest outage has significant financial consequences and impacts customer trust. The Amazon.com platform, which provides services for many web sites worldwide, is implemented on top of an infrastructure of tens of thousands of servers and network components located in many datacenters around the world. At this scale, small and large components fail continuously and the way persistent state is managed in the face of these failures drives the reliability and scalability of the software systems.This paper presents the design and implementation of Dynamo, a highly available key-value storage system that some of Amazon's core services use to provide an "always-on" experience. To achieve this level of availability, Dynamo sacrifices consistency under certain failure scenarios. It makes extensive use of object versioning and application-assisted conflict resolution in a manner that provides a novel interface for developers to use.},
journal = {SIGOPS Oper. Syst. Rev.},
month = {oct},
pages = {205-–220},
numpages = {16},
keywords = {scalability, reliability, performance}
}

@inproceedings{DeCandia2007,
author = {DeCandia, Giuseppe and Hastorun, Deniz and Jampani, Madan and Kakulapati, Gunavardhan and Lakshman, Avinash and Pilchin, Alex and Sivasubramanian, Swaminathan and Vosshall, Peter and Vogels, Werner},
title = {Dynamo: amazon's highly available key-value store},
year = {2007},
isbn = {9781595935915},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1294261.1294281},
doi = {10.1145/1294261.1294281},
abstract = {Reliability at massive scale is one of the biggest challenges we face at Amazon.com, one of the largest e-commerce operations in the world; even the slightest outage has significant financial consequences and impacts customer trust. The Amazon.com platform, which provides services for many web sites worldwide, is implemented on top of an infrastructure of tens of thousands of servers and network components located in many datacenters around the world. At this scale, small and large components fail continuously and the way persistent state is managed in the face of these failures drives the reliability and scalability of the software systems.This paper presents the design and implementation of Dynamo, a highly available key-value storage system that some of Amazon's core services use to provide an "always-on" experience. To achieve this level of availability, Dynamo sacrifices consistency under certain failure scenarios. It makes extensive use of object versioning and application-assisted conflict resolution in a manner that provides a novel interface for developers to use.},
booktitle = {Proceedings of Twenty-First ACM SIGOPS Symposium on Operating Systems Principles},
pages = {205–-220},
numpages = {16},
keywords = {scalability, reliability, performance},
location = {Stevenson, Washington, USA},
series = {SOSP '07}
}
@inproceedings{CoralCDN2010,
author = {Freedman, Michael J.},
title = {Experiences with CoralCDN: a five-year operational view},
year = {2010},
publisher = {USENIX Association},
address = {USA},
abstract = {CoralCDN is a self-organizing web content distribution network (CDN). Publishing through CoralCDN is as simple as making a small change to a URL's hostname; a decentralized DNS layer transparently directs browsers to nearby participating cache nodes, which in turn cooperate to minimize load on the origin webserver. CoralCDN has been publicly available on PlanetLab since March 2004, accounting for the majority of its bandwidth and serving requests for several million users (client IPs) per day. This paper describes CoralCDN's usage scenarios and a number of experiences drawn from its multi-year deployment. These lessons range from the specific to the general, touching on the Web (APIs, naming, and security), CDNs (robustness and resource management), and virtualized hosting (visibility and control). We identify design aspects and changes that helped CoralCDN succeed, yet also those that proved wrong for its current environment.},
booktitle = {Proceedings of the 7th USENIX Conference on Networked Systems Design and Implementation},
pages = {7},
numpages = {1},
location = {San Jose, California},
series = {NSDI'10}
}
@article{Dabek2001,
author = {Dabek, Frank and Kaashoek, M. Frans and Karger, David and Morris, Robert and Stoica, Ion},
title = {Wide-area cooperative storage with CFS},
year = {2001},
issue_date = {Dec. 2001},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {35},
number = {5},
issn = {0163-5980},
url = {https://doi.org/10.1145/502059.502054},
doi = {10.1145/502059.502054},
journal = {SIGOPS Oper. Syst. Rev.},
month = {oct},
pages = {202–-215},
numpages = {14} }
@inproceedings{BOINC2004,
author = {Anderson, David P.},
title = {BOINC: A System for Public-Resource Computing and Storage},
year = {2004},
isbn = {0769522564},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/GRID.2004.14},
doi = {10.1109/GRID.2004.14},
abstract = {BOINC (Berkeley Open Infrastructure for Network Computing) is a software system that makes it easy for scientists to create and operate public-resource computing projects. It supports diverse applications, including those with large storage or communication requirements. PC owners can participate in multiple BOINC projects, and can specify how their resources are allocated among these projects. We describe the goals of BOINC, the design issues that we confronted, and our solutions to these problems.},
booktitle = {Proceedings of the 5th IEEE/ACM International Workshop on Grid Computing},
pages = {4–-10},
numpages = {7},
series = {GRID '04}
}
@article{Ivy2003,
author = {Muthitacharoen, Athicha and Morris, Robert and Gil, Thomer M. and Chen, Benjie},
title = {Ivy: a read/write peer-to-peer file system},
year = {2003},
issue_date = {Winter 2002},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {36},
number = {SI},
issn = {0163-5980},
url = {https://doi.org/10.1145/844128.844132},
doi = {10.1145/844128.844132},
abstract = {Ivy is a multi-user read/write peer-to-peer file system. Ivy has no centralized or dedicated components, and it provides useful integrity properties without requiring users to fully trust either the underlying peer-to-peer storage system or the other users of the file system.An Ivy file system consists solely of a set of logs, one log per participant. Ivy stores its logs in the DHash distributed hash table. Each participant finds data by consuiting all logs, but performs modifications by appending only to its own log. This arrangement allows Ivy to maintain meta-data consistency without locking. Ivy users can choose which other logs to trust, an appropriate arrangement in a semi-open peer-to-peer system.Ivy presents applications with a conventional file system interface. When the underlying network is fully connected, Ivy provides NFS-like semantics, such as close-to-open consistency. Ivy detects conflicting modifications made during a partition, and provides relevant version information to application-specific conflict resolvers. Performance measurements on a wide-area network show that Ivy is two to three times slower than NFS.},
journal = {SIGOPS Oper. Syst. Rev.},
month = {dec},
pages = {31–44},
numpages = {14}
}
@article{Lakshman2010,
author = {Lakshman, Avinash and Malik, Prashant},
title = {Cassandra: a decentralized structured storage system},
year = {2010},
issue_date = {April 2010},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {44},
number = {2},
issn = {0163-5980},
url = {https://doi.org/10.1145/1773912.1773922},
doi = {10.1145/1773912.1773922},
abstract = {Cassandra is a distributed storage system for managing very large amounts of structured data spread out across many commodity servers, while providing highly available service with no single point of failure. Cassandra aims to run on top of an infrastructure of hundreds of nodes (possibly spread across different data centers). At this scale, small and large components fail continuously. The way Cassandra manages the persistent state in the face of these failures drives the reliability and scalability of the software systems relying on this service. While in many ways Cassandra resembles a database and shares many design and implementation strategies therewith, Cassandra does not support a full relational data model; instead, it provides clients with a simple data model that supports dynamic control over data layout and format. Cassandra system was designed to run on cheap commodity hardware and handle high write throughput while not sacrificing read efficiency.},
journal = {SIGOPS Oper. Syst. Rev.},
month = {apr},
pages = {35–40},
numpages = {6}
}
@article{anderson2002seti,
  title={SETI@ home: an experiment in public-resource computing},
  author={Anderson, David P and Cobb, Jeff and Korpela, Eric and Lebofsky, Matt and Werthimer, Dan},
  journal={Communications of the ACM},
  volume={45},
  number={11},
  pages={56--61},
  year={2002},
  publisher={ACM New York, NY, USA}
}
@inproceedings{balatsouras2022wichord,
  title={Wichord: A chord protocol application on p2p lora wireless sensor networks},
  author={Balatsouras, Christos-Panagiotis and Karras, Aristeidis and Karras, Christos and Tsolis, Dimitrios and Sioutas, Spyros},
  booktitle={2022 13th International Conference on Information, Intelligence, Systems and Applications (IISA)},
  pages={1--8},
  year={2022},
  organization={IEEE},
  doi={10.1109/IISA56318.2022.9904339}
}
@book{coulouris2005distributed,
  title={Distributed systems: concepts and design},
  author={Coulouris, George F and Dollimore, Jean and Kindberg, Tim},
  year={2005},
  publisher={pearson education}
}
@article{vogels2009,
author = {Vogels, Werner},
title = {Eventually consistent},
year = {2009},
issue_date = {January 2009},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {52},
number = {1},
issn = {0001-0782},
url = {https://doi.org/10.1145/1435417.1435432},
doi = {10.1145/1435417.1435432},
abstract = {Building reliable distributed systems at a worldwide scale demands trade-offs between consistency and availability.},
journal = {Commun. ACM},
month = {jan},
pages = {40–-44},
numpages = {5}
}
@article{lamport2001paxos,
  title={Paxos made simple},
  author={Lamport, Leslie},
  journal={ACM SIGACT News (Distributed Computing Column) 32, 4 (Whole Number 121, December 2001)},
  pages={51--58},
  year={2001}
}
@article{dean2008mapreduce,
  title={MapReduce: simplified data processing on large clusters},
  author={Dean, Jeffrey and Ghemawat, Sanjay},
  journal={Communications of the ACM},
  volume={51},
  number={1},
  pages={107--113},
  year={2008},
  publisher={ACM New York, NY, USA}
}
@Inbook{Clarke2001,
author={Clarke, Ian and Sandberg, Oskarand Wiley, Brandon and Hong, Theodore W.},
editor={Federrath, Hannes},
title={Freenet: A Distributed Anonymous Information Storage and Retrieval System},
bookTitle={Designing Privacy Enhancing Technologies: International Workshop on Design Issues in Anonymity and Unobservability Berkeley, CA, USA, July 25--26, 2000 Proceedings},
year={2001},
publisher={Springer Berlin Heidelberg},
address={Berlin, Heidelberg},
pages={46--66},
abstract={We describe Freenet, an adaptive peer-to-peer network application that permits the publication, replication, and retrieval of data while protecting the anonymity of both authors and readers. Freenet operates as a network of identical nodes that collectively pool their storage space to store data files and cooperate to route requests to the most likely physical location of data. No broadcast search or centralized location index is employed. Files are referred to in a location-independent manner, and are dynamically replicated in locations near requestors and deleted from locations where there is no interest. It is infeasible to discover the true origin or destination of a file passing through the network, and dificult for a node operator to determine or be held responsible for the actual physical contents of her own node.},
isbn={978-3-540-44702-3},
doi={10.1007/3-540-44702-4_4},
url={https://doi.org/10.1007/3-540-44702-4_4}
}
@article{liang2005kazaa,
  title={The kazaa overlay: A measurement study},
  author={Liang, Jian and Kumar, Rakesh and Ross, Keith W},
  journal={Computer networks journal (Elsevier)},
  volume={49},
  number={6},
  year={2005}
}
@inproceedings{iliofotou2010comparing,
  title={Comparing BitTorrent clients in the wild: the case of download speed.},
  author={Iliofotou, Marios and Siganos, Georgos and Yang, Xiaoyuan and Rodriguez, Pablo},
  booktitle={IPTPS},
  pages={11},
  year={2010}
}